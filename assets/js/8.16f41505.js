(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{228:function(t,i,v){"use strict";v.r(i);var e=v(0),_=Object(e.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"设计模式简介"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#设计模式简介"}},[t._v("#")]),t._v(" 设计模式简介")]),t._v(" "),v("blockquote",[v("p",[t._v("设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。"),v("strong",[t._v("使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。")]),t._v("\n毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。")])]),t._v(" "),v("h2",{attrs:{id:"五大设计原则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五大设计原则"}},[t._v("#")]),t._v(" 五大设计原则")]),t._v(" "),v("ul",[v("li",[v("p",[v("strong",[t._v("S – Single Responsibility Principle 单一职责原则")])]),t._v(" "),v("ul",[v("li",[t._v("一个程序只做好一件事")]),t._v(" "),v("li",[t._v("如果功能过于复杂就拆分开，每个部分保持独立")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("O – OpenClosed Principle 开放/封闭原则")])]),t._v(" "),v("ul",[v("li",[t._v("对扩展开放，对修改封闭")]),t._v(" "),v("li",[t._v("增加需求时，扩展新代码，而非修改已有代码")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("L – Liskov Substitution Principle 里氏替换原则")])]),t._v(" "),v("ul",[v("li",[t._v("子类能覆盖父类")]),t._v(" "),v("li",[t._v("父类能出现的地方子类就能出现")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("I - Interface Segregation Principle 接口隔离原则")])]),t._v(" "),v("ul",[v("li",[t._v("保持接口的单一独立")]),t._v(" "),v("li",[t._v("类似单一职责原则，这里更关注接口")])])]),t._v(" "),v("li",[v("p",[v("strong",[t._v("D – Dependency Inversion Principle 依赖倒转原则")])]),t._v(" "),v("ul",[v("li",[t._v("面向接口编程，依赖于抽象而不依赖于具体")]),t._v(" "),v("li",[t._v("使用方只关注接口而不关注具体类的实现")])])])]),t._v(" "),v("h2",{attrs:{id:"tip"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#tip"}},[t._v("#")]),t._v(" TIP")]),t._v(" "),v("blockquote",[v("p",[v("em",[v("strong",[t._v("TIP")])]),v("br"),t._v(" "),v("em",[v("strong",[t._v("本栏输出总结主要来自阅读一些框架源码以及开源工具库源码等，希望能持续积累锻炼编程思想。")])])])])])}),[],!1,null,null,null);i.default=_.exports}}]);